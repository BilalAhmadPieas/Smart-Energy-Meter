#include <SoftwareSerial.h>
#include "PubSubClient.h"
#include <ESP8266WiFi.h>
const char* mqtt_server = "broker.netpie.io";
const int mqtt_port = 1883;
const char* mqtt_client = "fc094a0a-6178-493f-9d4c-2b40299eae3b";
const char* mqtt_username = "nZJ38T9DmLER3fpG3KKgerm2qrWCrkqW";
const char* mqtt_password = "pvAx7k2Z8xh4t8GnXAUN6tAKap4DJnJa";
//const char* topic = "your/topic"; // Specify the topic you want to publish to
const char* SOCTopic = "@msg/SOC" ;
// ----- Wifi configuration---------------------
  const char* ssid     = "Dr.PIEAS";       // WiFi ssid
  const char* password = "12345678";   // WiFi password

WiFiClient espClient;
PubSubClient client(espClient);
SoftwareSerial EVSerial(D2, D3);

bool EVConnected = false;
bool receivedConfirmation = false;
int powerAllowed = 0; // Initialize to 0 for safety
void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  if (WiFi.begin(ssid, password)) {
    while (WiFi.status() != WL_CONNECTED) {
      delay(500);
      Serial.print(".");
    }
  }
}
void reconnect() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (client.connect(mqtt_client, mqtt_username, mqtt_password)) {
      Serial.println("connected");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}

void publishData(const char*topic,String data) {
  if (client.publish(topic, data.c_str())) {
    Serial.println("Data published successfully");
  } else {
    Serial.println("Failed to publish data");
  }
}

void setup() {
  Serial.begin(9600);
  EVSerial.begin(115200);
  while (!Serial);
  
  setup_wifi();
  client.setServer(mqtt_server, mqtt_port);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  if (EVSerial.available()) { // Check for incoming serial data
    String data = EVSerial.readStringUntil('\n');
    Serial.println(data);
    if (data.startsWith("EV Con")) {
      EVConnected = true;
      powerAllowed = 8;
      receivedConfirmation = false; // Reset confirmation flag
    } else if (data.startsWith("Confirmation received")) {
      receivedConfirmation = true;
    } else if (data.startsWith("EV Dis")) {
      EVConnected = false;
      powerAllowed = 0;
      EVSerial.println("Power Allowed: " + String(powerAllowed));
      receivedConfirmation = false; // Reset confirmation flag
    }
    else if (data.startsWith("SOC:")){
      publishData(SOCTopic,data);
      }
  }

  if (EVConnected && !receivedConfirmation) {
    EVSerial.println("Power Allowed: " + String(powerAllowed));
  }
  }



